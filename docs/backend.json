{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "Display name of the user."
        },
        "listings": {
          "type": "array",
          "description": "references to listings associated with the user",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "email",
        "name"
      ]
    },
    "Listing": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Listing",
      "type": "object",
      "description": "Represents a rental property listing.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the listing."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the listing. (Relationship: User 1:N Listing)"
        },
        "type": {
          "type": "string",
          "description": "Type of the house (e.g., Bedsitter, Single Room, 1 Bedroom)."
        },
        "location": {
          "type": "string",
          "description": "Location or estate of the property."
        },
        "price": {
          "type": "number",
          "description": "Rent per month in Ksh."
        },
        "contact": {
          "type": "string",
          "description": "Contact phone number for the landlord."
        },
        "images": {
          "type": "array",
          "description": "URLs of the property images.",
          "items": {
            "type": "string",
            "format": "uri"
          }
        },
        "features": {
          "type": "array",
          "description": "Array of features available in the property.",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the listing was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "type",
        "location",
        "price",
        "contact",
        "images",
        "createdAt"
      ]
    },
    "RentalType": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RentalType",
      "type": "object",
      "description": "Represents the type of rental available.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the rental type."
        },
        "name": {
          "type": "string",
          "description": "Name of the rental type (e.g., Bedsitter, Apartment, House)."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the rental type."
        }
      },
      "required": [
        "id",
        "name"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Only the authenticated user can read/write their own profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/listings/{listingId}",
        "definition": {
          "entityName": "Listing",
          "schema": {
            "$ref": "#/backend/entities/Listing"
          },
          "description": "Stores rental property listings. Includes denormalized 'userId' for authorization independence, allowing secure listing and filtering.",
          "params": [
            {
              "name": "listingId",
              "description": "The unique identifier of the listing."
            }
          ]
        }
      },
      {
        "path": "/rental_types/{rentalTypeId}",
        "definition": {
          "entityName": "RentalType",
          "schema": {
            "$ref": "#/backend/entities/RentalType"
          },
          "description": "Stores the categories of rental options available, such as 'Bedsitter' or 'Apartment'.",
          "params": [
            {
              "name": "rentalTypeId",
              "description": "The unique identifier for the rental type."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability, aligning with the specified core design principles and strategy mandates. It uses path-based ownership for user-related data and avoids hierarchical authorization dependencies by denormalizing data where necessary.  \n\n1.  **User Data**: User data is stored in `/users/{userId}`.  This follows the 'Private Data' access model and path-based ownership, ensuring only the user can access their own data.\n2.  **Listings**: Each listing is stored in `/listings/{listingId}`. The `userId` field is denormalized to ensure that we know who created the listing without having to perform a `get()` operation in the security rules.  This design allows for simple `list` operations while maintaining security.\n3. **Rental Types:** Rental types are stored in `/rental_types/{rentalTypeId}`. This collection stores the different categories of rental properties such as Bedsitters or Apartments. This design allow for simple `list` operations.\n\nThis structure achieves Authorization Independence by denormalizing the `userId` field in the `listings` collection, eliminating the need for `get()` calls in security rules. It supports QAPs by segregating data based on ownership and access needs, enabling secure and efficient `list` operations."
  }
}